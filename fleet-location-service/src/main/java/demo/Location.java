/*
 * Copyright 2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package demo;

import java.util.Date;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;

import lombok.Data;
import lombok.RequiredArgsConstructor;

import com.fasterxml.jackson.annotation.JsonInclude;


/**
 * A POJO representation of a truck on the road.
 *
 * Auto-generated by http://www.jsonschema2pojo.org/.
 *
 * @author Dave Syer
 *
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Data
@RequiredArgsConstructor
@Entity
public class Location {

	enum VehicleMovementType {
		STOPPED, IN_MOTION;

		public boolean isMoving() {
			return this!=STOPPED;
		}
	}

	@Id
	@GeneratedValue
	private Long id;
	@OneToOne(fetch=FetchType.EAGER, cascade=CascadeType.ALL)
	private final UnitInfo unitInfo;
	@OneToOne(fetch=FetchType.EAGER, cascade=CascadeType.ALL)
	private UnitFault unitFault;
	private double latitude;
	private double longitude;
	private String heading;
	private double gpsSpeed;
	private boolean gpsStatus;
	private long odometer;
	private double totalEngineTime;
	private double totalIdleTime;
	private double totalFuelUsage;
	private String address;
	private Date timestamp = new Date();
	private String tspProvider;
	private VehicleMovementType vehicleMovementType = VehicleMovementType.STOPPED;
	private String serviceType;
	// TODO: why is this not part of UnitFault?
	@OneToOne(fetch=FetchType.EAGER, cascade=CascadeType.ALL)
	private FaultCode faultCode;

	@SuppressWarnings("unused")
	private Location() {
		this.unitInfo = null;
	}

	public String getVin() {
		return this.unitInfo==null ? null : this.unitInfo.getUnitVin();
	}

}
